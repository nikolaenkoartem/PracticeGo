package practice2

import (
	"fmt"
)

// Задача 1.1
// Подберите значения x, y таким образом, чтобы выражение:
// (x || y && x) == !(y && x) || x && !y
// принимало значение true
// Необходимо обернуть задачу в функцию.
func Odin_odin () bool{
	var x bool
	var y bool
	fmt.Scan(&x)
	fmt.Scan(&y)
	return (x || y && x) ==! (y && x) || x && !y
}

// Задача 2.1
// Напишите функцию, которая принимает 2 строки и сравнивает их по
// длинне. Требуется вернуть значения true или false.
func Dva_odin () bool{
	var x string
	var y string
	fmt.Scan(&x)
	fmt.Scan(&y)
	return bool(len(x)==len(y))
}

// Задача 3.1
// Напишите функцию, которая возвращает промежуток, которому
// принадлежит x: [-infinity; 4];(4;10);{10};(10;50]
func Tri_odin() string {
	var a int
	fmt.Scan(&a)
	if a>4 && a<10 {
		return "x принадлежит (4;10)"
	} else if a==10 {
		return "x принадлежит {10}"
	} else if a>10 && a<=50 {
		return "x принадлежит (10;50]"
	} else if a<=4 {
		return "x принадлежит [-inf;4]"
	}
	return ""
}

// Задача 4.1
// Напишите функцию, возвращающую класс кодов ошибок в протоколе
// http по списку (вводить необходимо первое значение из интервала):
// 1. [100;199] - Информационные
// 2. [200;299] - Успешные
// 3. [300;399] - Перенаправления
// 4. [400;499] - Клиентские ошибки
// 5. [500;599] - Серверные ошибки
func Four(){
	var x int
	fmt.Scan(&x)
	switch x {
		case 100:
			fmt.Println("Информационная ошибка")
		case 200:
			fmt.Println("Успешно")
		case 300:
			fmt.Println("Перенаправление")
		case 400:
			fmt.Println("Клиентская ошибка")
		case 500:
			fmt.Println("Серверная ошибка")
	}
}

// Задача 5.1
// Объявите и инициализируйте структуру собаки, содержащую поля:
// цвет, возраст, имя, порода. Структура должна иметь возможность
// быть инициализированной в других пакетах и тег json.
type Dog struct {
	Color string `json:"color"`
	Age int `json:"age"`
	Name string `json:"name"`
	Breed string `json:"breed"`
}

// Задача 6.1
// Объявите константы на уровне пакета, 
// содержащие значение физических постоянных:
// 1. Скорость света.
// 2. Гравитационная постоянная.
// 3. Постоянная Планка.
// 4. Постоянная Больцмана.
// Выведите их на экран.
// Необходимо присваивать константы без 10 в степени.
const (
	C = 300000000
	G = 6.67/100000000000
	H = 6.63/10000000000000000000000000000000000
	K = 1.38/10000000000000000000000
)

// Задача 7.1
// Напишите функцию, возвращающую двумерный массив 
// чисел, содержащий 15 значений. Выведите его в консоль.
// Укажите в комментариях к задаче, будет ли он содержать 
// дополнительные значения?
func Seven() [8][2]int {
	arr := [8][2]int {
		{1,2},
		{3,4},
		{5,6},
		{7,8},
		{9,10},
		{11,12},
		{13,14},
		{15}, 
		// Так как массив должен состоять из 15 эдементов,
		// следовательно на это нужно выделить 8 строк, в каждой
		// из которых по 2 столбца. Но 15 элементов - нечетное
		// число, следовательно надо взять места в массиве
		// на 16 элементов, а вместо последнего будет "0".
	}
	return arr
}

// Задача 8.1
// Напишите функцию, принимающую 2 аргумента 
// (слайс, номер элемента), которая определяет, 
// есть ли элемент в слайсе. Функция должна возвращать 
// значение true или false.
func Eight(arr []int, i int) bool{
	if len(arr)>i {
		return true
	}
	return false
}